css : Cascading Style Sheets
위에서부터 차례로 적용됨. 마지막에 있는 것이 최종적으로 적용

css와 html 섞는 법
1. 같은 파일에 html 코드와 css 코드를 놓는 방법
2. css와 html 분리시키기

<1. 같은 파일에 html 코드와 css 코드 놓는 방법>
<style> 태그 사용하기
    -<head> 태그 안에 있어야 함
    -여기에 css 코드를 써야 함

<2. css와 html 분리시키기>
css 파일을 만들어서 html 파일에서 링크 연결시키기
<link href="styles.css" rel="stylesheet" >
    -rel = relationship 무슨 관계인지


css가 하는 일은 html 태그를 가리키는 말. 
이 가리키는 것을 selector라고 함
selector {

}
이런식으로 작성

# 블록과 인라인
-블록은 옆에 아무것도 올 수 없음, 높이와 너비가 있음
-인라인은 높이와 너비가 없음, box가 아님
-거의 다 block이기 때문에 inline이 뭔지 외우는 게 편함
-inline인 요소 : span, a, image
-inline요소 block으로 만들기
    -ex
    span{
        display : block;
    }

* block
-box가 가지고있는 세 가지 속성 = margin, border, padding
    -margin : box의 border(경계)의 바깥에 있는 공간 _위, 아래, 왼, 오
        -margin: 20px, 15px;    // 위아래, 왼오
        -margin: 20px, 5px, 12px, 9px;  // 위, 오, 아래, 왼
         -collapsing margins ==> 위아래에서만 일어남
            위아래 margin이 겹치면 하나가 됨
        -inline에서는 위아래에 margin 적용 불가, 좌우만 됨
    -padding : box의 border의 안쪽에 있는 공간
    -border : 너비, 스타일, 색깔
        -inline, block 모두에 적용됨
        -border: 2px solid black;

# class
- 같은 게 존재해도 됨
- 여러 class를 가질 수 있음
    -<span class="hi honey potato">


# 셀렉터 선택
id는 #id명 쓰면 됨  ---id는 하나만 가질 수 있음, 같은 게 존재할 수 x
class는 .class 

--> 이렇게 배우기는 했지만 실제로 코딩하면서 어떤 걸 class로 쓰고 어떤 걸 id로 썼는지 기억하기 힘들기 때문에
대부분 그냥 전부 class로 통일한다고 함.. --> 그냥 . 쓰면 됨

# 
inline-block        --- inline을 block처럼 인식하게 함 
    -반응형 디자인을 지원하지 않음. 창 크기에 따라 다름


# flex _ 세 가지 규칙
display : flex;
1. 자식 엘리먼트에는 어떤 것도 적지 말아야 한다 _부모 엘리멘트에만 명시하기
    - 자식 엘리멘트들을 움직이고 싶다면 자식 엘리먼트의 속성에 flexbox에 대해서 
      아무것도 적지 않아도 됨
    - 부모 엘리먼트한테 말하면 됨 _자식 개개인(div에 일일히) 적는 게 아니라 상위 태그에 적으라는 뜻?

2. 주축(main axis)과 교차축(cross axis)
    - 주축 = 수평, 교차축 = 수직 --> flexbox에서 기본적으로 축들이 가지고 있는 것
    - justify-content는 주축에 적용
    - align-items는 교차축에 적용 // 교차축에 있는 item들을 움직이게 함
        -수직수평으로 말하지 않은 이유 --> 나중에 바꿀 수 있음

3. justify-content와 align-items를 적용하고 싶으면 먼저 display: flex;를 해줘야 함
박스를 원하는대로 움직이게 하려면 부모 엘리먼트를 flex container로 만들어야됨

- 주축 교차축 바꾸기
flex-direction 사용
두 가지 옵션이 있음 - column, row
display: flex; 했을 때의 디폴트값은 row임 (주축은 수평, 교차축은 수직)
flex-direction: column; 하면 주축은 수직, 교차축은 수평이 됨
    column-reverse; --> 밑에서 시작해서 위로 올라가는 것
    row-reverse; --> 비슷하게

-ex 코드
justify-content: center; // flex-end , flex-strat(디폴트), space-evenly(빈공간을 같은 크기로 나누어서 배치) , 
                            space-around , space-between 
align-items: flex-start; // 저기 써져있는 게 디폴트, 그 외는 flex-end , center
                            stretch(div를 늘어나게 하는데, 고정된 값이 있으면 적용되지 않음)
    justify-content처럼 많은 옵션을 가지고 있지는 않음
** height 설정할 때 px = 항상 똑같은 크기 / vh = 디바이스마다 다르게 설정(veiwport height)

flex-wrap : nowrap; // wrap, wrap-reverse(다음 줄로 이동할 때 순서대로가 아니라 마지막 순서부터)
    nowrap -> 화면 폭이 줄어들면 div 크기도 줄어들어서 계속 한줄로
    wrap -> div 크기를 유지한 채 화면 크기가 줄어들면 표시할 수 있는 것만 남기고 다음 줄로 이동

# position
position은 레이아웃보다는 위치를 아주 조금 옮기고 싶을 떄 사용

1. position: fixed;
스크롤을 내려도 item이 계속 그 자리에 있음.
div가 고정된 위치는 초기에 위치한 자리임. 레이아웃 상에서 그려진 위치에 고정되어 있는 것.
    원하면 위치 변경할 수 있음. ex) top: 5px;

2. position: static;
레이아웃이 박스를 처음 위치하는 곳에 두는 것.
position: relative;        >> element가 처음 위치한 곳을 기준으로 위치 수정
                             ex) top: -10px; left: -10px; 이런 식으로..
position : absolute;       >> top left bottom right을 쓰고 싶을 때 사용하기
    부모 박스 기준이 아니라 전체 레이아웃의 가장 위아래왼오로 간다.
    - 가장 가까운 relative 부모를 기준으로 이동시켜줌(부모가 relative가 아니라면 그 위의 부모로 적용)

# Cominator
Pseudo Selector 
 : 좀 더 세부적으로 엘리먼트를 선택해주는 것
 div: last-child {
    background-color: teal;
 }
 이런 식으로 수많은 div들 중 하나를 선택할 수 있음..
 class나 id를 만드는 것보다 훨씬 좋은 방법!!! _html코드는 건들지도 않았음.. css만 건들었지

 span: nth-child(2),
 span: nth-child(4) {
    background-color: tomato;
 }
 이런 식으로 선택할 수도 있음!!

span: nth-child(even) {

}   // 짝수번 째의 span에 적용

span: nth-child(3n +1) {

}   // 이런 식으로 지정도 가능

ex) p span {}   // p 안의 span에 적용(부모자식)
    div p span {}   // div 안의 p 안의 span
    div > span {}   // 여기서 span은 div의 바로 밑 자식이어야 함 (바로 밑 자식)
    p + span {}     // p 안의 span이 아니라 p 바로 다음으로 오는 span (바로 다음으로 오는 태그(형제))
    p ~ span {}     // span이 p의 형제인데 바로 뒤에 오지 않을 경우 사용하는 것(중간에 다른 태그가 끼어있을 경우)

# attribute selector
attribute를 통해 어떤 것이든 선택할 수 있게 해줌.

ex) input[type="password"] { }   // type이 "password"인 input들

intput[placeholder~="name"]{ }   // placeholder에 "name"이라는 단어를 포함한 모든 input

a[title]{   }               >> title을 가진 것
a[href="~~"] {  }           >> 특정 링크로 가는 것
a[href*="example"] {  }     >> "example"을 포함하는 것 
a[href^=".org"] {  }        >> ".org"로 시작하는 모든 것 (처음) 
a[href$=".org"] {  }        >> ".org"로 끝나는 모든 것 (끝)

# state
button: active;     // 대상을 누르고 있는 동안
button: hover;      // 마우스가 대상 위에 있을 때
button: focus;      // 키보드로 선택되었을 때 __ ex) input상자 / 커서 깜빡깜빡거리는상태

a:visited { }       // 링크에만 적용 / 링크를 방문하고 나면 글씨 색깔 바뀌는 것

form: focus-within { }      // input들 중 하나가 focused가 되면 form의 모습을 바꾼다는 것
            <form>
                <input type~~>
                <input type~~>
                <input type~~>
            </form>

다른 엘리먼트와 연계해서 사용
form:hover input { }    // form이 hover 상태가 되면 input이 바뀜 / 이 조건은 form이 hover가 되어있고 그 안에 input이 있는 경우 적용
    부모의 state에 따라 자식을 바꾸는 것
form:hover input:focused { }       // form이 hover가 된 상태에서 input이 focused이면 적용


# pseudo element
-실제로 존재하는 element는 아니지만 스타일링을 할 수 있게 해줌 (세세한 선택하는 느낌)

ex) input::placeholder { }      // placeholder을 꾸며줌
    p::selection { }            // 텍스트를 선택(끌기)했을 때
    p::first-letter { }         // 문단 첫 번째 글자만 크게 _{}안에서 font-size로 조정 가능
    p::first-line { }           // 문단 첫 줄에만

# css에서 알아야 할 컬러 시스템
1. hexadecimal color(16진수 컬러) #fffff 이런 거(컬러코드)
2. RGB 방식 / rgb(252, 206, 0);
3. rgba(252, 206, 0, 0);   >> 여기서 a는 알파로, 투명도(opacity)를 나타냄_0이면 아예 없음 1이면 최대찐하기 0.5면 반절
** 크롬 익스텐션 color picker 검색해보기

#root       // 기본적으로 모든 document의 뿌리가 됨 출발점이 되는 것
:root {
    --main-color: #fffff;       // 변수 --main-color을 document의 root에 저장하는 것. 
 }       
 >> 컬러를 일일히 쓸 필요가 없음 그냥 ex) background-color: var(--main-color); 이렇게 쓰면 됨
 원래는 custom property라고 함. 근데 니콜라스쌤은 변수(variable)로 말하는 게 더 좋대
 이름은 항상 --변수명 이렇게 지어야됨. 빈공간은-로.. 변수 사용 시에는 var()로
 컬러만 저장할 수 있는 게 아님.
    ex) --default-border: 1px solid var(--main-color); 
        사용-> border: var(--default-border);
*** 어떤 브라우저에서 작동되는지 확실하게 모르겠다면 css custom properties를 검색해서 볼 수 있음


-------------------------------------------
ADVANCED CSS !!

# Transition        >> state에 따라 바뀌는 property를 갖고 있으면 사용되는 것
 : 어떤 상태에서 다른 상태로의 "변화"를 애니메이션으로 만드는 방법
-transition을 사용하지 않는다면 그냥 변화하게 됨. 안예쁘게 그냥 확! 확! 바뀌는 거...

 - transition이라는 속성은 state가 없는 요소에 붙여야 함. 
 transition: background-color 10s ease-in-out;  // background-color을 10초동안 변화시킨다는 뜻
    >> 어떤 것을 변화하게 만들 것인지 써야 함. 이 경우에는 background-color에 변화를 주고 싶은 경우

 transition: background-color 10s ease-in-out, color 5s ease-in-out;    // color도 함께 변화 주기

 ** background-color와 color을 hover에서 바꿨기 때문에 적용되는 것. transition이 hover에 있는 background-color을 찾고 
 background-color가 hover일 때 달라져있으면 그 변화를 애니메이션으로 바꾸는 것. 

-- transition은 hover에 있으면 안되고 hover이 적용된 그 element가 처음 생겨난 곳(root)에 있어야함(element 속성에). state에 있으면 안됨!
        >> hover에 쓰게 되면 마우스를 올려놓는 동안은 transition이 작동함(hover 상태니까) 그런데 마우스 떼자마자 애니메이션 작동x

*** ease-in-out
ease-in function이라고 부름.
기본적으로 브라우저에게 애니메이션이 어떻게 변할지 말해주는 것. 
mattewlein.com/tools/ceaser
이 웹사이트는 어떻게 변화하는지 쉽게 알 수 있게 해주는 사이트임. __웹사이트에서 움직임이 그래프로 표시됨

ex)
transition: all 1s linear;  // linear은 무언가를 직선으로 움직이게 만들어줌. 초반에 느려지거나 후반에 빨라지거나 하지 않음. 같은 속도로 좌우직선으로 움직임
                   ease-in; // 시작점보다 빨라지면서 움직임 
                   ease-out;    // 끝에서 느려짐
                   ease-in-out; // 처음에 느리게 시작했다가 가속하고 느려지면서 끝나기.
                   ease
            >> 이 네 개가 디폴트로 갖고 있는 것.

웹사이트 밑에 보면 cubic-bezier 라는 것이 있는데 그 코드를 복사해서 사용할 수 있음. 

- 가장 일반적으로 사용하는 방법은 all 을 쓰는 것.
근데 가끔 전부를 transition하고 싶지 않을 경우, all 말고 적용하고 싶은 대상만 적으면 됨
다른 transition을 쓰고 싶으면 , 를 써서 여러 개 적어주면 됨

# Transformation
 : 한 요소를 transform(변형)시킬 수 있음
ex) transform: rotateY(30deg) rotateX(30deg) rotateZ(30deg);  // 30도 회전시키기!
>> css로 3D까지 할 수 있음!!!

    transform: scaleX(4);   // X축으로 scale(크기 변경) 4배!
               scale(2,2);  // x y 축으로 scale 변경
               translateX(-10px); // x축으로 이동
        >> translate에서 이 명령어는 transformation을 적용시키기는 하지만 다른 형제를 변화시키지는 않음
               skew(45deg); // 비스듬히 기울이기
--> transition이랑 같이 사용할 수 있음 ---> transition: transform 5s ease-in-out;

transform mdn 검색해서 나오는 사이트에서 그냥 복사해서 사용할 수 있음.

 -- border-radius: 50%; 하면 테두리를 원으로 만들 수 있음

# Animations

@keyframes CoinFlip {
    from {
        transform: rotateX(0);
    }
    to {
        transform: rotateX(360deg);
    }
}   // 0부터 360도까지 회전하는 것      --> 혼합할수도있음. 여러개 적으면 됨.

그리고 적용할 대상 {} 안에
animation: CoinFlip 5s ease-in-out infinite;    // infinite를 적으면 5초동안 애니메이션이 재생되는데 무한으로 재생됨.
>> 마우스의 움직임이나 그런 것 없이 그냥 자동적으로 애니메이션을 가짐. 
이게 애니메이션을 만드는 기본적인 방법!!

@keyframes CoinFlip {
    0% {
        transform: rotateX(0);
    }
    50% {
        transform: rotateX(360deg);
    }
    100% {
        transform: rotateX(0);
    }
}  >> 여러 단계로 나눠서 애니메이션 만들기. 원하는 만큼의 스텝을 가질 수 있음
*** css animations 검색


# media query   >> 조건을 추가할 수 있는 방법(코드의 조건을 적는 것. 다음의 조건을 만족하면 이 css를 실행해라)
 : 오직 css만을 이용해서 스크린의 사이즈를 알 수 있는 방법
 -and를 통해서 연결됨.

 @media screen and (max-width: 400px) {     // 스크린이 400px보다 작으면 다음을 적용해서 보여줘라.
    div {
        background-color: aquablue;
    }
 }

@media screen and (min-width: 400px) and (max-width: 800px) {     // 스크린이 400px보다 크고 800px보다 작으면 다음을 적용해서 보여줘라.
    div {
        background-color: aquablue;
    }
}

@media screen and (min-width: 1200px) {     // 스크린이 1200px보다 크면 다음을 적용해서 보여줘라.
    div {
        background-color: aquablue;
    }
 }

 @media screen and (min-width: 1200px) and (orientation: landscape) {     // 스크린이 1200px보다 크고 + 가로면 다음을 적용해서 보여줘라.
    div {
        background-color: aquablue;
    }
 }      // 핸드폰 가로면 landscape 세로면 portrait 

 ex)
 <span> Please flip your phone! </span> 해두고 위에 @media 여기에 조건 landscape걸어두고 그 안에 
 span{
    display: none;
 }  하면 핸드폰 가로로 뒤집었을 때 span이 출력되지 않게 됨!!! 첫번째 반응형 웹사이트 ㅋㅋ

 ** min-device-width / max-device-width ==> 오직 핸드폰에만 적용되는 media query
        -> 이걸 쓰게 되면 데스크톱 브라우저는 이해할 수 없음.
*** css media query mdn 검색!


# BEM (Block Element Modify)
이라는 css 규칙이 있음! 검색하면 나오는데, 이걸 따르는 게 좋음

# form
- 2가지 속성(attribute)을 가지고 있음 _action method
- action : 어떤 페이지로 data를 보낼 건지 지정할 수 있음
    ex) action="freids.html"
- method
    - 2가지 방식 중 하나를 쓸 수 있음 _ POST GET
        - POST : 백엔드 서버에 정보를 전송하는 방식
        - GET : URL에 포함
                보안에 취약함. username과 password를 GET 방식으로 보내면 안됨!
                URL에 포함되어도 상관없는 정보들을 GET 방식으로 보내는 것